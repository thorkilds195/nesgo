package main

import (
	"log"
	"math/rand"
	"nesgo/cpu"

	"github.com/hajimehoshi/ebiten/v2"
	// "github.com/hajimehoshi/ebiten/v2/ebitenutil"
)

const (
	screenWidth  = 32
	screenHeight = 32
)

var game_code = []uint8{
	0x20, 0x06, 0x06, 0x20, 0x38, 0x06, 0x20, 0x0d, 0x06, 0x20, 0x2a, 0x06, 0x60, 0xa9, 0x02, 0x85,
	0x02, 0xa9, 0x04, 0x85, 0x03, 0xa9, 0x11, 0x85, 0x10, 0xa9, 0x10, 0x85, 0x12, 0xa9, 0x0f, 0x85,
	0x14, 0xa9, 0x04, 0x85, 0x11, 0x85, 0x13, 0x85, 0x15, 0x60, 0xa5, 0xfe, 0x85, 0x00, 0xa5, 0xfe,
	0x29, 0x03, 0x18, 0x69, 0x02, 0x85, 0x01, 0x60, 0x20, 0x4d, 0x06, 0x20, 0x8d, 0x06, 0x20, 0xc3,
	0x06, 0x20, 0x19, 0x07, 0x20, 0x20, 0x07, 0x20, 0x2d, 0x07, 0x4c, 0x38, 0x06, 0xa5, 0xff, 0xc9,
	0x77, 0xf0, 0x0d, 0xc9, 0x64, 0xf0, 0x14, 0xc9, 0x73, 0xf0, 0x1b, 0xc9, 0x61, 0xf0, 0x22, 0x60,
	0xa9, 0x04, 0x24, 0x02, 0xd0, 0x26, 0xa9, 0x01, 0x85, 0x02, 0x60, 0xa9, 0x08, 0x24, 0x02, 0xd0,
	0x1b, 0xa9, 0x02, 0x85, 0x02, 0x60, 0xa9, 0x01, 0x24, 0x02, 0xd0, 0x10, 0xa9, 0x04, 0x85, 0x02,
	0x60, 0xa9, 0x02, 0x24, 0x02, 0xd0, 0x05, 0xa9, 0x08, 0x85, 0x02, 0x60, 0x60, 0x20, 0x94, 0x06,
	0x20, 0xa8, 0x06, 0x60, 0xa5, 0x00, 0xc5, 0x10, 0xd0, 0x0d, 0xa5, 0x01, 0xc5, 0x11, 0xd0, 0x07,
	0xe6, 0x03, 0xe6, 0x03, 0x20, 0x2a, 0x06, 0x60, 0xa2, 0x02, 0xb5, 0x10, 0xc5, 0x10, 0xd0, 0x06,
	0xb5, 0x11, 0xc5, 0x11, 0xf0, 0x09, 0xe8, 0xe8, 0xe4, 0x03, 0xf0, 0x06, 0x4c, 0xaa, 0x06, 0x4c,
	0x35, 0x07, 0x60, 0xa6, 0x03, 0xca, 0x8a, 0xb5, 0x10, 0x95, 0x12, 0xca, 0x10, 0xf9, 0xa5, 0x02,
	0x4a, 0xb0, 0x09, 0x4a, 0xb0, 0x19, 0x4a, 0xb0, 0x1f, 0x4a, 0xb0, 0x2f, 0xa5, 0x10, 0x38, 0xe9,
	0x20, 0x85, 0x10, 0x90, 0x01, 0x60, 0xc6, 0x11, 0xa9, 0x01, 0xc5, 0x11, 0xf0, 0x28, 0x60, 0xe6,
	0x10, 0xa9, 0x1f, 0x24, 0x10, 0xf0, 0x1f, 0x60, 0xa5, 0x10, 0x18, 0x69, 0x20, 0x85, 0x10, 0xb0,
	0x01, 0x60, 0xe6, 0x11, 0xa9, 0x06, 0xc5, 0x11, 0xf0, 0x0c, 0x60, 0xc6, 0x10, 0xa5, 0x10, 0x29,
	0x1f, 0xc9, 0x1f, 0xf0, 0x01, 0x60, 0x4c, 0x35, 0x07, 0xa0, 0x00, 0xa5, 0xfe, 0x91, 0x00, 0x60,
	0xa6, 0x03, 0xa9, 0x00, 0x81, 0x10, 0xa2, 0x00, 0xa9, 0x01, 0x81, 0x10, 0x60, 0xa2, 0x00, 0xea,
	0xea, 0xca, 0xd0, 0xfb, 0x60,
}

func colorFromByte(b uint8) (r, g, b2 byte) {
	switch b {
	case 0:
		return 0x00, 0x00, 0x00
	case 1:
		return 0xFF, 0xFF, 0xFF
	case 2, 9:
		return 0x80, 0x80, 0x80
	case 3, 10:
		return 0xFF, 0x00, 0x00
	case 4, 11:
		return 0x00, 0xFF, 0x00
	case 5, 12:
		return 0x00, 0x00, 0xFF
	case 6, 13:
		return 0xFF, 0x00, 0xFF
	case 7, 14:
		return 0xFF, 0xFF, 0x00
	default:
		return 0x00, 0xFF, 0xFF
	}
}

func readScreenState(c *cpu.CPU, g *Emulator) bool {
	idx := 0
	update := false
	buf := g.framebuffer
	for i := 0x0200; i < 0x0600; i++ {
		color_idx := c.MemRead(uint16(i))
		r, g, b := colorFromByte(color_idx)
		if buf[idx] != r || buf[idx+1] != g || buf[idx+2] != b {
			buf[idx] = r
			buf[idx+1] = g
			buf[idx+2] = b
			buf[idx+3] = 0xFF
			update = true
		}
		idx += 4
	}
	return update
}

func handleUserInput(cpu *cpu.CPU) {
	if ebiten.IsKeyPressed(ebiten.KeyW) {
		cpu.MemWrite(0xFF, 0x77)
	}
	if ebiten.IsKeyPressed(ebiten.KeyS) {
		cpu.MemWrite(0xFF, 0x73)
	}
	if ebiten.IsKeyPressed(ebiten.KeyA) {
		cpu.MemWrite(0xFF, 0x61)
	}
	if ebiten.IsKeyPressed(ebiten.KeyD) {
		cpu.MemWrite(0xFF, 0x64)
	}
}

type Emulator struct {
	framebuffer []byte
	cpu         *cpu.CPU
	texture     *ebiten.Image
}

func dumpFramebuffer(fb []byte) {
	for y := 0; y < screenHeight; y++ {
		for x := 0; x < screenWidth; x++ {
			idx := (y*screenWidth + x) * 4
			r := fb[idx]
			if r > 0 {
				print("â–ˆ")
			} else {
				print(" ")
			}
		}
		println()
	}
	println("-------------------------------------------------")
}

func (e *Emulator) Update() error {
	handleUserInput(e.cpu)
	for i := 0; i < 100; i++ {
		alive := e.cpu.Step(func() {
			e.cpu.MemWrite(0xFE, uint8(rand.Intn(15)+1))
		})

		if !alive {
			panic("No longer alive")
		}
	}
	if readScreenState(e.cpu, e) {
		e.texture.WritePixels(e.framebuffer)
	}
	return nil
}

func (e *Emulator) Draw(screen *ebiten.Image) {
	op := &ebiten.DrawImageOptions{}
	screen.DrawImage(e.texture, op)
}

func (e *Emulator) Layout(outsideWidth, outsideHeight int) (int, int) {
	return screenWidth, screenHeight
}

func NewEmulator() *Emulator {
	fb := make([]byte, screenWidth*screenHeight*4)
	cpuInst := cpu.InitCPU()
	cpuInst.Load(game_code)
	cpuInst.Reset()
	texture := ebiten.NewImage(screenWidth, screenHeight)

	return &Emulator{
		framebuffer: fb,
		cpu:         cpuInst,
		texture:     texture,
	}
}

func main() {
	ebiten.SetWindowSize(screenWidth*10, screenHeight*10)
	ebiten.SetWindowTitle("NES Snake Emulator")

	game := NewEmulator()
	if err := ebiten.RunGame(game); err != nil {
		log.Fatal(err)
	}
}
